#Use colorgcc and C++11
import os

linkmode = ARGUMENTS.get("link","dynamic")

#Yaklib (client library) is needed for the HTTP API
Import("yaklibSrc")
yaklibSrc = ["../YakClient/" + filename for filename in yaklibSrc]

march = ARGUMENTS.get('march','core2')

linkflags=[]
cxxflags=["-std=c++0x","-march=" + march,"-Wall","-O2","-ffast-math"]
if linkmode == "static":
    cxxflags.append("-static")
    linkflags.append("-static")
elif linkmode == "dynamic":
    pass
else:
    raise Exception("Error: Link mode %s invalid!" % link)

enableDebug = ARGUMENTS.get('debug', 0)
if int(enableDebug):
    cxxflags.append('-g')

linkflags.append("-pthread")
linkflags.append("-Wl,-rpath=.")
#linkflags.append("-static-libgcc")

#C++ compiler now defaults to clang++ because it has better error messages.
cxx = ARGUMENTS.get('cxx','clang++')
stdlib = ARGUMENTS.get('stdlib','default')

if stdlib != "default":
    cxxflags.append("-stdlib=libc++")
    linkflags.append("-stdlib=libc++")

#Fix clang bug on precise
if cxx == "clang++":
    cxxflags.append("-D__extern_always_inline=inline")

#Removed unused stuff
cxxflags.append("-ffunction-sections")
cxxflags.append("-fdata-sections")
linkflags.append("-Wl,--gc-sections")

env = Environment(CXX=cxx,
                  CXXFLAGS=cxxflags,
                  LINKFLAGS=linkflags,
                  CPPPATH=["include","../YakClient/include"],
                  ENV = {'PATH' : os.environ['PATH'],
                         'TERM' : os.environ['TERM'],
                         'HOME' : os.environ['HOME']})

malloc = ARGUMENTS.get("malloc","jemalloc")
libraries = ["leveldb","zmq","boost_program_options",malloc]
if linkmode == "static":
    #Somehow we need this
    libraries.append("snappy")
    #libraries.append("unwind")

yakServerSrc =  ["src/zutil.cpp",
    "src/BoyerMoore.cpp",
    "src/FileUtils.cpp",
    "src/main.cpp",
    "src/TableOpenHelper.cpp",
    "src/ConfigParser.cpp",
    "src/Tablespace.cpp",
    "src/UpdateWorker.cpp",
    "src/ReadWorker.cpp",
    "src/Logger.cpp",
    "src/LogServer.cpp",
    "src/LogSinks.cpp",
    "src/AbstractFrameProcessor.cpp",
    "src/AsyncJobRouter.cpp",
    "src/ClientSidePassiveJob.cpp",
    "src/SequentialIDGenerator.cpp",
    "src/Server.cpp",
    "src/ThreadUtil.cpp",
    "src/HTTPServer.cpp",
    "src/http/URLParser.cpp"]

Export(["yakServerSrc","env"])

env.Program(target="yakserver", source=yakServerSrc + yaklibSrc, LIBS=libraries)
