#!/usr/bin/env python
# -*- coding: utf8 -*-
#YakDB commandline tool
import argparse
import sys
import YakDB

class ConnectMode:
    requestReply = 0
    pushPull = 1
    pubSub = 2

def exists(db, tableNo, keys):
    output = db.exists(tableNo, keys)
    #Convert value-only to key-->value map
    outMap = {}
    for index, inval in enumerate(keys):
        outMap[inval] = output[index]
    print(outMap)

def read(db, tableNo, keys):
    output = db.read(tableNo, keys)
    #Convert value-only to key-->value map
    outMap = {}
    for index, inval in enumerate(keys):
        outMap[inval] = output[index]
    print(outMap)

def put(db, tableNo, key, value):
    db.put(tableNo, {key: value})
    #Convert value-only to key-->value map
    print("Put '%s' --> '%s'" % (key, value))

def delete(db, tableNo, keys):
    db.delete(tableNo, keys)
    print("Deleted [%s]" % ", ".join(keys))

def scan(db, tableNo, fromKey, toKey):
    #Data is remapped in connection class
    print(db.scan(tableNo, fromKey, toKey))
    
def scanLimit(db, tableNo, fromKey, limit):
    #Data is remapped in connection class
    print(db.scanWithLimit(tableNo, fromKey, int(limit)))
    
def count(db, tableNo, fromKey, toKey):
    print(db.count(tableNo, fromKey, toKey))

def deleteRange(db, tableNo, fromKey, toKey):
    db.deleteRange(tableNo, fromKey, toKey)

def info(db):
    print(db.serverInfo())

def compact(db, tableNo, fromKey, toKey):
    db.compactRange(tableNom, fromKey, toKey)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="YakDB client tool")
    #Server options
    serverOptsGroup = parser.add_argument_group(parser, "Server options")
    serverOptsGroup.add_argument("-s, --server",
                                 help="Specifies server URL to connect to",
                                 default="tcp://localhost:7100",
                                 action='store',
                                 dest="serverURL")
    serverOptsGroup.add_argument("-g, --server-group",
                                 help="Specifies the server group to connect to for PUB/SUB connections",
                                 action='store',
                                 dest="serverGroup")
    serverOptsGroup.add_argument("-c, --connection-mode",
                                 choices=["PUB","PUSH","REQ"],
                                 default="REQ",
                                 action="store",
                                 dest="connectMode",
                                 help="The connection mode to use for requests. Most requests only work in REQ mode.")
    #Database options
    dbOptsGroup = parser.add_argument_group(parser, "Database options")
    dbOptsGroup.add_argument("-t, --table",
                             help="Set table number to use",
                             action="store",
                             default=1,
                             type=int,
                             dest="tableNo")
    #CLI options
    cliOptsGroup = parser.add_argument_group(parser, "CLI options")
    cliOptsGroup.add_argument("-q, --quiet",
                              help="Don't print connection info",
                              action="store_true",
                              dest="quiet",
                              default=False)
    cliOptsGroup.add_argument("-r, --repl",
                              help="Start into a REPL where db is the database connection",
                              action="store_true",
                              dest="repl")
    #Create parsers for the individual commands
    subparsers = parser.add_subparsers(title="Commands")
    parserInfo = subparsers.add_parser("info")
    parserInfo.set_defaults(func=info)
    #Parse
    args = parser.parse_args()
    print args
    if not args.quiet:
        sys.stderr.write("Connecting to %s\n" % args.serverURL)
    db = YakDB.Connection()
    args.func(args)
    #
    #Setup connection
    #
    #Default is req/rep
    if args.connectMode == "PUSH":
        db.usePushMode()
    elif arg.connectMode == "PUB":
        db.usePubMode()
    else:
        db.useRequestReplyMode()
    #Connect
    db.connect(opts.serverURL)
    #s
    if opts.repl:
        import code
        code.InteractiveConsole(locals=globals()).interact("ZeroDB REPL -- Raw connection is available in 'db' variable")
    else: #Single-command mode
        tableNo = opts.tableNo
        cmd = args[0]
        #Extract other args
        arg1 = None
        arg2 = None
        if len(args) >= 2: arg1 = args[1]
        if len(args) >= 3: arg2 = args[2]
        commands = ["open","read","exists","put","delete","deleterange","scan","scan+limit","count","info","compact"]
        if cmd not in commands:
            print("Command '%s' not available - available commands: %s" % (cmd, ", ".join(commands)))
            sys.exit(1)
        elif cmd == "info": info(db)
        elif cmd == "exists": exists(db, tableNo, args[1:])
        elif cmd == "read": read(db, tableNo, args[1:])
        elif cmd == "put": put(db, tableNo, arg1, arg2)
        elif cmd == "delete": delete(db, tableNo, args[1:])
        elif cmd == "scan": scan(db, tableNo, arg1, arg2)
        elif cmd == "scan+limit": scanLimit(db, tableNo, arg1, arg2)
        elif cmd == "deleterange": deleteRange(db, tableNo, arg1, arg2)
        elif cmd == "count": count(db, tableNo, arg1, arg2)
        elif cmd == "compact": compact(db, tableNo, arg1, arg2)